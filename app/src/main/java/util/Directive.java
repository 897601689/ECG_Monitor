package util;

/**
 * Created by YF on 2018/1/, 0x16. 指令类
 */

public class Directive {

    //<editor-fold desc="ECG">
    public static byte[] Ecg_Handshake = {(byte) 0xFA, 0x0A, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0D};// 上电握手命令
    //病人类型
    public static byte[] Ecg_S_Patient1 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11};//ECG成人
    public static byte[] Ecg_S_Patient2 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x13};//ECG儿童
    public static byte[] Ecg_S_Patient3 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x12};//ECG新生儿

    //导联类型
    public static byte[] Ecg_3_LeadMode = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2E};//3导联
    public static byte[] Ecg_5_LeadMode = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2E};//5导联

    //心电校准
    public static byte[] Ecg_Cal_on = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35};//心电校准启动
    public static byte[] Ecg_Cal_off = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01, 0x36};//心电校准停止

    //心电增益
    public static byte[] Ecg_S_Gain_25 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x24, 0x00, 0x00, 0x00, 0x00, (byte) 0xF0, 0x21};//0.25
    public static byte[] Ecg_S_Gain_50 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x24, 0x00, 0x00, 0x00, 0x00, (byte) 0xF1, 0x22};//0.5
    public static byte[] Ecg_S_Gain_100 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x24, 0x00, 0x00, 0x00, 0x00, (byte) 0xF2, 0x23};//1
    public static byte[] Ecg_S_Gain_200 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x24, 0x00, 0x00, 0x00, 0x00, (byte) 0xF3, 0x24};//2

    //滤波模式
    public static byte[] Ecg_S_Filter1 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F};//诊断
    public static byte[] Ecg_S_Filter2 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x22, 0x00, 0x00, 0x00, 0x00, 0x01, 0x30};//监护
    public static byte[] Ecg_S_Filter3 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x22, 0x00, 0x00, 0x00, 0x00, 0x02, 0x31};//HARDEST
    public static byte[] Ecg_S_Filter4 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x22, 0x00, 0x00, 0x00, 0x00, 0x03, 0x32};//手术

    //陷波滤波
    public static byte[] Ecg_S_TrapWave_50 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30};//50HZ
    public static byte[] Ecg_S_TrapWave_60 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x23, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};//60HZ
    public static byte[] Ecg_S_TrapWave_50_60 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x23, 0x00, 0x00, 0x00, 0x00, 0x02, 0x32};//50/60HZ
    public static byte[] Ecg_S_TrapWave_off = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x23, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40};//关闭陷波滤波

    //设置心率计算通道
    public static byte[] Ecg_directive1 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x26, 0x00, 0x00, 0x00, 0x00, 0x10, 0x43};//自主选择
    public static byte[] Ecg_directive2 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33};//通道I
    public static byte[] Ecg_directive3 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x26, 0x00, 0x00, 0x00, 0x00, 0x01, 0x34};//通道II

    //窒息时间设置
    public static byte[] Ecg_directive4 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x05, 0x42};//5S
    public static byte[] Ecg_directive5 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x47};//10S
    public static byte[] Ecg_directive6 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x4C};//15S

    //呼吸导联设置
    public static byte[] Ecg_directive7 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E};//心电导联I
    public static byte[] Ecg_directive8 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x31, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3F};//心电导联II

    //设置呼吸敏感度
    public static byte[] Ecg_directive9 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F};//敏感度1
    public static byte[] Ecg_directive10 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x32, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40};//敏感度2
    public static byte[] Ecg_directive11 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x32, 0x00, 0x00, 0x00, 0x00, 0x02, 0x41};//敏感度3
    public static byte[] Ecg_directive12 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x32, 0x00, 0x00, 0x00, 0x00, 0x03, 0x42};//敏感度4
    public static byte[] Ecg_directive13 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x32, 0x00, 0x00, 0x00, 0x00, 0x04, 0x43};//敏感度5 most

    //PACE设置
    public static byte[] Ecg_directive14 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x27, 0x00, 0x00, 0x00, 0x00, 0x01, 0x35};//启动PACE检测
    public static byte[] Ecg_directive15 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34};//停止PACE检测

    public static byte[] Ecg_directive16 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36};//导联I
    public static byte[] Ecg_directive17 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x29, 0x00, 0x00, 0x00, 0x00, 0x01, 0x37};//导联II
    public static byte[] Ecg_directive18 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x29, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};//导联III
    public static byte[] Ecg_directive19 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x29, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3A};//导联AVL
    public static byte[] Ecg_directive20 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x29, 0x00, 0x00, 0x00, 0x00, 0x03, 0x39};//导联AVR
    public static byte[] Ecg_directive21 = new byte[]{(byte) 0xFA, 0x0B, 0x01, 0x01, 0x29, 0x00, 0x00, 0x00, 0x00, 0x05, 0x3B};//导联AVF
    //</editor-fold>

    //<editor-fold desc="NIBP">
    public static byte[] Bp_Handshake = new byte[]{(byte) 0xFA, 0x0A, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0E};//上电握手命令
    //病人类型
    public static byte[] Bp_S_Patient1 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E};//NIBP成人
    public static byte[] Bp_S_Patient2 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x20};//NIBP儿童
    public static byte[] Bp_S_Patient3 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1F};//NIBP新生儿

    //启动测量
    public static byte[] Bp_Start = new byte[]{(byte) 0xFA, 0x0A, 0x02, 0x01, 0x21, 0x00, 0x00, 0x00, 0x00, 0x2E};

    //停止测量
    public static byte[] Bp_Stop = new byte[]{(byte) 0xFA, 0x0A, 0x02, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x2D};

    //设置测量模式
    public static byte[] Bp_S_Mode = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20};//手动
    public static byte[] Bp_S_Mode_1 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x01, 0x21};//自动测量1分钟
    public static byte[] Bp_S_Mode_2 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22};//自动测量2分钟
    public static byte[] Bp_S_Mode_3 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x03, 0x23};//自动测量3分钟
    public static byte[] Bp_S_Mode_4 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x04, 0x24};//自动测量4分钟
    public static byte[] Bp_S_Mode_5 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x05, 0x25};//自动测量5分钟
    public static byte[] Bp_S_Mode_10 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x06, 0x26};//自动测量10分钟
    public static byte[] Bp_S_Mode_15 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x07, 0x27};//自动测量15分钟
    public static byte[] Bp_S_Mode_30 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x08, 0x28};//自动测量30分钟
    public static byte[] Bp_S_Mode_60 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x09, 0x29};//自动测量60分钟
    public static byte[] Bp_S_Mode_90 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x2A};//自动测量90分钟
    public static byte[] Bp_S_Mode_180 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x2B};//自动测量2小时
    public static byte[] Bp_S_Mode_240 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x2C};//自动测量4小时
    public static byte[] Bp_S_Mode_360 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x2D};//自动测量6小时
    public static byte[] Bp_S_Mode_480 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x2E};//自动测量8小时
    public static byte[] Bp_S_Mode_05 = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x2F};//5分钟连续测量

    //设置预充气压力值
    public static byte[] Bp_S_Pressur = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x02, 0x21};//成人80
//    public static byte[] Ecg_S_Patient = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x04, 0x23};
//    public static byte[] Ecg_S_Patient = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x06, 0x25};
//    public static byte[] Ecg_S_Patient = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x08, 0x27};
//    public static byte[] Ecg_S_Patient = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x09, 0x28};
//    public static byte[] Ecg_S_Patient = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x29};
//    public static byte[] Ecg_S_Patient = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x2B};
//    public static byte[] Ecg_S_Patient = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x2D};
//    public static byte[] Ecg_S_Patient = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x10, 0x2F};
//    public static byte[] Ecg_S_Patient = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x12, 0x31};
//    public static byte[] Ecg_S_Patient = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x14, 0x33};
//    public static byte[] Ecg_S_Patient = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x15, 0x34};
//    public static byte[] Ecg_S_Patient = new byte[]{(byte) 0xFA, 0x0B, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x16, 0x35};


    //启动压力校准
    public static byte[] Bp_Cal = new byte[]{(byte) 0xFA, 0x0C, 0x02, 0x01, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31};

    //启动漏气检测
    public static byte[] Bp_Leak = new byte[]{(byte) 0xFA, 0x0A, 0x02, 0x01, 0x23, 0x00, 0x00, 0x00, 0x00, 0x30};

    //启动静脉穿刺
    public static byte[] Bp_Venipuncture = new byte[]{(byte) 0xFA, 0x0A, 0x02, 0x01, 0x24, 0x00, 0x00, 0x00, 0x00, 0x31};

    //查询模块信息
    public static byte[] Bp_Q_Modular = new byte[]{(byte) 0xFA, 0x0A, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10};

    //获取测试结果
    public static byte[] Bp_Q_State = new byte[]{(byte) 0xFA, 0x0A, 0x02, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x11};

    //系统自检结果
    public static byte[] BP_Directive1 = new byte[]{(byte) 0xFA, 0x0A, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10};

    //获取袖带压力值
    public static byte[] Bp_Q_CuffPressure = new byte[]{(byte) 0xFA, 0x0A, 0x02, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12};

    //复位模块
    public static byte[] Bp_Reset = new byte[]{(byte) 0xFA, 0x0A, 0x02, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x3D};

    //启动在线升级
    public static byte[] Bp_Update = new byte[]{(byte) 0xFA, 0x0A, 0x02, 0x01, 0x7F, 0x00, 0x00, 0x00, 0x00, (byte) 0x8C};
    //</editor-fold>

    //<editor-fold desc="SPO2">
    public static byte[] SpO2_Handshake = {(byte) 0xFA, 0x0A, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0F};//上电握手命令
    //病人类型
    public static byte[] SpO2_S_Patient1 = new byte[]{(byte) 0xFA, 0x0B, 0x03, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13};//SPO2成人
    public static byte[] SpO2_S_Patient2 = new byte[]{(byte) 0xFA, 0x0B, 0x03, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x15};//SPO2儿童
    public static byte[] SpO2_S_Patient3 = new byte[]{(byte) 0xFA, 0x0B, 0x03, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x14};//SPO2新生儿

    //查询模块信息
    public static byte[] SpO2_Q_Modular = new byte[]{(byte) 0xFA, 0x0A, 0x03, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x11};

    //模块自检结果
    public static byte[] SpO2_SelfCheck = new byte[]{(byte) 0xFA, 0x0A, 0x03, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x12};

    //灵敏度设置
    public static byte[] SpO2_S_Sensitivity1 = new byte[]{(byte) 0xFA, 0x0B, 0x03, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14};//灵敏度1(最低)
    public static byte[] SpO2_S_Sensitivity2 = new byte[]{(byte) 0xFA, 0x0B, 0x03, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x01, 0x15};//灵敏度2
    public static byte[] SpO2_S_Sensitivity3 = new byte[]{(byte) 0xFA, 0x0B, 0x03, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x02, 0x16};//灵敏度3
    public static byte[] SpO2_S_Sensitivity4 = new byte[]{(byte) 0xFA, 0x0B, 0x03, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x03, 0x17};//灵敏度4

    //启动在线升级
    public static byte[] SpO2_Update = new byte[]{(byte) 0xFA, 0x0A, 0x03, 0x01, 0x7F, 0x00, 0x00, 0x00, 0x00, (byte) 0x8D};
    //</editor-fold>

}
